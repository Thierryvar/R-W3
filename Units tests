Unit tests (with expected output) for Programming Assignment 2

### Example

>    source("cachematrix.R")

>    amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
>    amatrix$get()         # Returns original matrix
     [,1] [,2]
[1,]    1    3
[2,]    2    4

 >   cacheSolve(amatrix)   # Computes, caches, and returns    matrix inverse
    [,1] [,2]
[1,]   -2  1.5
[2,]    1 -0.5

 >  amatrix$getinverse()  # Returns matrix inverse
     [,1] [,2]
[1,]   -2  1.5
[2,]    1 -0.5

 >  cacheSolve(amatrix)   # Returns cached matrix inverse using previously computed matrix inverse
getting cached data
     [,1] [,2]
[1,]   -2  1.5
[2,]    1 -0.5

>    amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2)) # Modify existing matrix
>    cacheSolve(amatrix)   # Computes, caches, and returns new matrix inverse
            [,1] [,2]
[1,] -0.13333333  0.2
[2,]  0.01010101  0.0

>    amatrix$get()         # Returns matrix
     [,1] [,2]
[1,]    0   99
[2,]    5   66

>    amatrix$getinverse()  # Returns matrix inverse
            [,1] [,2]
[1,] -0.13333333  0.2
[2,]  0.01010101  0.0

TirÃ© du forum, fonctionnement des fonctions fournies

I will show you the output from the sample functions to illustrate their behaviour. From the output you should be able to discern the logic within the R code. The functions we are expected to implement to handle invertible matrices follows the exact same logic. The sample run show below can be adapted to the new functions for matrices and the behaviour will be the same.

> a <- makeVector(c(1,2,3,4))
> a$get()
[1] 1 2 3 4 
> a$getmean()
NULL
> cachemean(a)
[1] 2.5
> a$getmean()  # this is only to show you that the mean has been stored and does not affect anything
[1] 2.5
> cachemean(a)
getting cached data
[1] 2.5
> a$set(c(10,20,30,40))
> a$getmean()
NULL
> cachemean(a)
[1] 25
> cachemean(a)
getting cached data
[1] 25
> a$get()
[1] 10 20 30 40
> a$setmean(0)  # do NOT call setmean() directly despite it being accessible for the reason you will see next
> a$getmean()
[1] 0      # obviously non-sense since...
> a$get()
[1] 10 20 30 40
>cachemean(a)
[1] 0    # as you can see the call to setmean() effectively corrupted the functioning of the code
> a <- makeVector(c(5, 25, 125, 625))
> a$get()
[1] 5 25 125 625
> cachemean(a)
[1] 195
> cachemean(a)
getting cached data
[1] 195

Indeed understanding the concepts in terms of the behaviour of the two functions takes more than a few minutes because you have to not only read the existing exemplar functions but take some time to play with the functions. Often seeing the code in action is more helpful than reading a chapter about lexical scoping. Variable m is declared uniquely in both functions and are allocated separate addresses in memory. In function makeVector() you'll notice variable m is declared immediately and assigned the value NULL using the standard assignment operator (<-). However, the "set" functions defined within the containing makeVector() function require the special assignment operator (<--) to update the value of variable m; it is important to remember variable m was declared and initialised by makeVector(). Had functions set() and setmean() not used the special assignment operator, these functions would have allocated memory to store the value and labelled the address as m. The variables named m would effectively be isolated and distinct variables as I will illustrate below.